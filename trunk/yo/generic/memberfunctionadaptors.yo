Member function adaptors allow the use of generic algorithms when the function
to call is a member function of a class. Consider the following class:
        verb(
    class Data
    {
        public:
            void display();
    };
        )
    Obviously, the tt(display) member is used to display the information
stored in tt(Data) objects.

    When storing tt(Data) objects in a vector the tt(for_each) generic
algorithm cannot easily be used to call the tt(display) member for each of the
objects stored in the vector, as tt(for_each) accepts either a (non-member)
function or a function object as its third argument, but does not accept a
member function.

    The member function adaptor tt(mem_fun_ref) can be used to solve this
problem. It expects the address of a member function without any parameters
and its function call operator calls that function for the object that is
passed to its function call operator. In the next example tt(vector<Data>
data) is filled with tt(Data) objects. Then tt(for_each) is used to display the
information in the various tt(Data) objects that are stored in the tt(data)
vector:
    verb(
    int main()
    {
        vector<Data> data;

        // the 'data' vector is filled with Data objects here

        for_each(data.begin(), data.end(), mem_fun_ref(&Data::display));
    }
        )

A second member function adaptor is tt(mem_fun), which is used to call a
member function from a em(pointer) to an object. The above example could
be rewritten to something like:
        verb(
    int main()
    {
        vector<Data *> data;

        data.push_back(new Data);   // multiple push-backs if applicable

        for_each(data.begin(), data.end(), mem_fun(&Data::display));

        // delete the Data objects pointed to by data's elements
    }
        )

An interesting observation is that tlurl(http://www.sgi.com) provides an
example of the use of tt(mem_fun) where polymorphic members are used. If
tt(Data::display) is a virtual member function and tt(Derived1) and
tt(Derived2) (both derived from tt(Data)) provide their own implementations of
tt(display), then pointers to tt(Derived1) and tt(Derived2) objects can be
entered into the tt(data) vector. The tt(for_each) algorithm then calls
the proper (overridden) tt(display) function. E.g.,
        verb(
    int main()
    {
        vector<Data *> data;

        data.push_back(new Derived1);
        data.push_back(new Derived2);

                                        // calls Derived1::display or
                                        // Derived2::display.
        for_each(data.begin(), data.end(), mem_fun(&Data::display));
    }
        )
    This example, however, uses public virtual members, confounding the
virtual and public interfaces of classes (cf. section ref(INHERITWHY)) and is
therefore deprecated. Polymorphism could still be used, though, but the
public interface should be provided by tt(Data) as follows:
        verb(
    class Data
    {
        public:
            void display();             // calls v_display
        private:
            virtual void v_display();   // overriden by derived
    };                                  // classes
        )
    In the above example tt(mem_fun) would simply receive tt(&Data::display)'s
address. No need to modify the above tt(main) function, but now tt(Data)'s
polymorphic features are completely separated from its public interface.
