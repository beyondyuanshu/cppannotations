Within the context of the STL an em(adaptable function) is a function object
defining
    itemization(
    iti(argument_type) as a synonym of the type of its unary function
operator's argument, and
    iti(first_argument_type) and ti(second_argument_type) as
synonyms of the types of its binary function operator's arguments
    )
and defining ti(result_type) as the type of the return value of its function
call operator.

The STL defines ti(pointer_to_unary_function) and
ti(pointer_to_binary_function) as adaptors accepting pointers to,
respectively, unary and binary functions, converting them into adaptable
functions.  In the context of the STL using adaptable functions should
probably be preferred over pointers to functions as the STL's adaptable
functions define the abovementioned types describing their arguments and
result types.  At the end of this section an example is given where these
types are actually required, and a plain pointer to a function cannot be used.

In practice the tt(pointer_to_unary_function) and
tt(pointer_to_binary_function) adaptors are hardly ever explicitly
used. Instead, the overloaded function adaptor ti(ptr_fun) is used.

When tt(ptr_fun) is provided with a unary function it uses
tt(pointer_to_unary_function) to create an em(adaptable unary function) and it
uses tt(pointer_to_binary_function) when provided with a binary function to
create an em(adaptable binary function).

Here is an example showing the use of tt(ptr_fun), creating an adaptable
binary function. In tt(main), the word to search for is extracted from the
standard input stream as well as additional words that are stored in a vector
of tt(string) objects. If the target word is found the program displays the
word following the target word in the vector of tt(string) objects. Searching
is performed case insensitively, for which the bf(C) library function
ti(strcasecmp) is used:
        verbinclude(examples/ptrfun.cc)
    The observant reader may have noticed that this is not a very efficient
program. The function tt(stringcasecmp) defines value type parameters forcing
the construction of copies of the arguments passed to tt(stringcasecmp) every
time it is called. However, when changing the parameter definitions into
        verb(
    inline int stringcasecmp(string const &lhs, string const &rhs)
        )
    the compiler generates an error message like:
        verb(
In instantiation of 'std::binder2nd<std::pointer_to_binary_function<
        const std::string&, const std::string&, int> >':

    typename _Operation::result_type std::binder2nd<_Operation>::operator()(
            typename _Operation::first_argument_type&) const
cannot be overloaded with:
    typename _Operation::result_type std::binder2nd<_Operation>::operator()(
            const typename _Operation::first_argument_type&) const
    )
    This problem (and its solution) is covered in a later chapter (cf. section
ref(REFTOREF)).
