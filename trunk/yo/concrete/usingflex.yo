    The lexical scanner developed in this section is used to monitor the
production of a file from several subfiles. The setup is as follows: the
i(input-language) knows of an ti(#include) directive, followed by a text
string specifying the file (path) which should be included at the location of
the tt(#include).

In order to avoid complexities irrelevant to the current example, the format
of the tt(#include) statement is restricted to the form
        ti(#include <filepath>).  The file specified between the pointed
brackets should be available at the location indicated by tt(filepath). If the
file is not available, the program terminates after issuing an error message.

The program is started with one or two filename arguments. If the program is
started with just one filename argument, the output is written to the
    i(standard output) stream tt(cout). Otherwise, the output is written to
the stream whose name is given as the program's second argument.

The program defines a maximum i(nesting depth). Once this maximum is exceeded,
the program terminates after issuing an error message. In that case, the
filename i(stack) indicating where which file was included is printed.

One additional feature is that (standard bf(C++)) i(comment-lines) are
ignored. So, tt(include) directives in comment-lines are ignored too.

    The program is created along the following steps:
    itemization(
    it() First, the file tt(lexer) is constructed, containing the
input-language specifications.
    it() From the specifications in tt(lexer) the requirements for the
tt(class Scanner) evolve. The tt(Scanner) class is a i(wrapper) around the
class ti(yyFlexLexer) generated by ti(flex). The requirements result in the
i(interface) specification for the class tt(Scanner).
    it() Next, tt(main()) is constructed. A tt(Scanner) object
is created  inspecting the i(command-line) arguments. If successful,
the scanner's member tt(yylex()) is called to construct the
output file.
    it() Now that  the global setup of the program has been specified,
the member functions of the various classes are constructed.
    it() Finally, the program is compiled and linked.
    )
