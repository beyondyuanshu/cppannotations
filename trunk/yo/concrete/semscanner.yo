The scanner for our polymorphic parser is simple and only needs to recognize
numbers, identifiers and some simple characters, returned as character
tokens. The scanner must also have access to the parser's tt(d_val__) data
member. Therefore the Scanner class defines a tt(Semantic *d_semval) member,
initialized to the parser's tt(Semantic d_val__) data member that is made
available to the Scanner's constructor:
        verb(
    inline Scanner::Scanner(Parser::STYPE__ *semval)
    :                       // or: Semantic *semval
        d_semval(semval)
    {}
        )

The scanner (generated by ti(flex)) recognizes input patterns, returns Parser
tokens (e.g., Parser::INT), and returns a semantic value when
applicable. E.g., when recognizing a tt(Parser::INT) the rule is:
        verb(
    {
        d_semval->reset(new Int(yytext));
        return Parser::INT;
    }
        )
tt(IDENTIFIER)'s semantic value is obtained analogously:
        verb(
[a-zA-Z_][a-zA-Z0-9_]*  {
                d_semval->reset(new Text(yytext));
                return Parser::IDENTIFIER;
            }
        )
