    When deriving a class (e.g., ti(ifdstreambuf)) from tt(streambuf) using a
buffer of one character, at least its member tt(streambuf::underflow()) should
be overridden, as this is the member to which all requests for input are
eventually directed. Since a buffer is also needed, the member
ti(streambuf::setg()) is used to inform the tt(streambuf) base class of the
size of the input buffer, so that it is able to set up its input buffer
pointers correctly. This will ensure that
    hi(streambuf::eback()) tt(eback()),
    hi(streambuf::gptr()) tt(gptr()), and
    hi(streambuf::egptr()) tt(egptr()) return correct values.

    The required class shows the following characteristics:
    itemization(
    it() Like the class designed for output operations, this class is derived
from tt(std::)ti(streambuf) as well.
    The class defines two data members, one of them a fixed-sized one
character buffer. The data members are defined as ti(protected) data members
so that derived classes (e.g., see section ref(IFDSEEK)) can access them. Here
is the full class interface:
        verbinsert(CLASS)(concrete/examples/ifdbuf.h)
    it() The constructor initializes the buffer. However, this initialization
is done so that ti(gptr()) will be equal to ti(egptr()). Since this implies
that the buffer is empty, tt(underflow()) will immediately be called to refill
the buffer:
        verbinsert(CONS)(concrete/examples/ifdbuf.h)
    it() Finally tt(underflow()) is overridden. It will first ensure that the
buffer is really empty. If not, then the next character in the buffer is
returned. If the buffer is really empty, it is refilled by reading from the
file descriptor. If this fails (for whatever reason), endOfFile() is
returned. More sophisticated implementations could react more intelligently
here, of course. If the buffer could be refilled, ti(setg()) is called to set
up tt(streambuf)'s buffer pointers correctly.
    it() The implementations of the member functions use low-level functions
to operate the file descriptors, so apart from tt(streambuf) the header file
ti(unistd.h) must have been read by the compiler before the implementations of
the member functions can be compiled.
    )
    This completes the construction of the tt(ifdstreambuf) class. It is used
in the following program:
        verbinclude(concrete/examples/ifdbuf.cc)
