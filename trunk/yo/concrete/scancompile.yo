    The final program is constructed in two steps. These steps are given for a
i(Unix) system, on which ti(flex) and the i(Gnu) bf(C++) compiler ti(g++) have
been installed:
    itemization(
    it() First, the lexical scanner's source is created using tt(flex). For
this the following command can be given:
        verb(
    flex lexer
        )
    it() Next, all sources are compiled and linked. In situations where the
default tt(yywrap()) function is used, the ti(libfl.a) library should be
linked against the final program. Normally, that's not required, and the
program can be constructed as, e.g.:
        verb(
    g++ -o lexer *.cc
        )
     )
    For the purpose of debugging a lexical scanner, the matched rules and the
returned tokens provide useful information. When the ti(%option debug) was
specified, debugging code is included in the generated scanner. To obtain
debugging info, this code must also be activated. Assuming the scanner object
is called tt(scanner), then the statement
    hi(flex: set_debug)
            verb(
    scanner.set_debug(true);
        )
    causes debugging info to be written to the standard error stream.
