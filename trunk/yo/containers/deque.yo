The ti(deque) (pronounce: `deck') class implements a
    i(doubly ended queue data structure) (deque).  Before tt(deque) containers
can be used the following preprocessor directive must have been specified:
hi(#include <deque>)
        verb(
    #include <deque>
        )
    A em(deque) is comparable to a queue, but it allows reading and writing at
both ends. Actually, the tt(deque) data type supports a lot more
functionality than the tt(queue), as will be clear from the following overview
of available member functions. A tt(deque) is a
combination of a tt(vector) and two queues, operating at both ends of the
vector. In situations where random insertions and the addition and/or removal
of elements at one or both sides of the vector occurs frequently, using
a tt(deque) should be considered.

The following constructors, operators, and member functions are available for
deques:
    itemization(
    it() hi(deque constructors) Constructors:
        itemization(
        it() A tt(deque) may be constructed empty:
        verb(
    deque<string>
        object;
        )
        As with the tt(vector), it is an error to refer to an element of an
empty deque.
        it() A deque may be initialized to  a certain number of
elements. By default, if the initialization value is not explicitly mentioned,
the default value or default constructor for the actual data type is used. For
example:
        verb(
    deque<string> object(5, string("Hello")), // initialize to 5 Hello's
    deque<string> container(10);              // and to 10 empty strings
        )
        it() A deque may be initialized using a two iterators. To
initialize a deque with elements 5 until 10 (including the last one) of a
tt(vector<string>) the following construction may be used:
        verb(
    extern vector<string> container;
    deque<string> object(&container[5], &container[11]);
        )
        it() A deque may be initialized using a i(copy constructor):
        verb(
    extern deque<string> container;
    deque<string> object(container);
        )
    )
    it() Apart from the standard operators for containers, the deque
supports the i(index operator), which may be used to retrieve or reassign
i(random) elements of the deque. Note that the elements which are indexed
must exist.
    it() The following i(member functions) are available for deques:
        itemization(
        ithtq(deque::back())(Type &deque::back())(this member returns a
reference to the last element in the deque. It is the
    i(responsibility of the programmer) to use the member only if the deque is
not empty.)
        ithtq(deque::begin())(deque::iterator deque::begin())(this member
returns an i(iterator) pointing to the first element in the deque. )
        ithtq(deque::clear())(void deque::clear())(this member erases all
elements in the deque.)
        ithtq(deque::empty())(bool deque::empty())(this member returns
tt(true) if the deque contains no elements.)
        ithtq(deque::end())(deque::iterator deque::end())(this member
returns an iterator pointing beyond the last element in the deque. )
        ithtq(deque::erase())(deque::iterator deque::erase())(the member can
be used to erase a specific range of elements in the deque:)
            itemization(
            itt(erase(pos)) erases the element pointed to by tt(pos). The
iterator tt(++pos) is returned.
            itt(erase(first, beyond)) erases elements indicated by the iterator
range rangett(first, beyond). tt(Beyond) is returned.
            )
        ithtq(deque::front())(Type &deque::front())(this member returns a
reference to the first element in the deque. It is the responsibility of the
programmer to use the member only if the deque is not empty.)
        ithtq(deque::insert())(... deque::insert())(this member can be used to
insert elements starting at a certain position. The return value depends on
the version of tt(insert()) that is called:)
            itemization(
            itt(deque::iterator insert(pos)) inserts a default value of type
tt(Type) at tt(pos), tt(pos) is returned.
            itt(deque::iterator insert(pos, value)) inserts tt(value) at
tt(pos), tt(pos) is returned.
            itt(void insert(pos, first, beyond)) inserts the elements in the
                i(iterator range) rangeti(first, beyond).
            itt(void insert(pos, n, value)) inserts tt(n) elements having value
tt(value) starting at iterator position tt(pos).
            )
        ithtq(deque::pop_back())(void deque::pop_back())(this member removes
the last element from the deque. With an i(empty deque) nothing happens.)
        ithtq(deque::pop_front())(void deque::pop_front())(this member removes
the first element from the deque. With an i(empty deque) nothing happens.)
        ithtq(deque::push_back())(void deque::push_back(value))(this member
adds tt(value) to the end of the deque.)
        ithtq(deque::push_front())(void deque::push_front(value))(this member
adds tt(value) before the first element of the deque.)
        ithtq(deque::resize())(void deque::resize())(this member can be used
to alter the number of elements that are currently stored in the deque:)
            itemization(
            itt(resize(n, value)) may be used to resize the deque to a size of
tt(n). tt(Value) is optional. If the deque is expanded and tt(value) is not
provided, the additional elements are initialized to the i(default value) of
the used data type, otherwise tt(value) is used
to initialize extra elements.
            )
        ithtq(deque::rbegin())(deque::reverse_iterator deque::rbegin())(
    hi(reverse_iterator) this member returns an iterator pointing to the last
element in the deque.)
        ithtq(deque::rend())(deque::reverse_iterator deque::rend())(this
member returns an iterator pointing before the first element in the deque.)
        ithtq(deque::size())(size_t deque::size())(this member returns the
number of elements in the deque.)
        ithtq(deque::swap())(void deque::swap(argument))(this member can be
used to swap two deques using identical data types.)
        )
    )
