The ti(vector) class implements an i(expandable array).
Before tt(vector) containers can be used the following preprocessor
directive must have been specified: hi(#include <vector>)
        verb(
    #include <vector>
        )
    The following constructors, operators, and member functions are available:
    itemization(
    it() hi(vector constructors) Constructors:
        itemization(
        it() A tt(vector) may be constructed empty:
        verb(
    vector<string> object;
        )
    Note the specification of the data type to be stored in the tt(vector):
the data type is given between angle brackets, just after the `tt(vector)'
container name. This is common practice with containers.
        it() A vector may be initialized to a certain number of elements.  One
of the nicer characteristics of vectors (and other containers) is that it
initializes hi(containers: initialization) its data elements to the data
type's i(default value). The data type's emi(default constructor) is used for
this i(initialization). With non-class data types the value 0 is used.  So,
for the tt(int) vector we know its initial values are zero.  Some examples:
        verb(
    vector<string> object(5, string("Hello")); // initialize to 5 Hello's,
    vector<string> container(10);              // and to 10 empty strings
        )
        it() A vector may be initialized using iterators. To
initialize a vector with elements 5 until 10 (including the last one) of an
existing tt(vector<string>) the following construction may be used:
        verb(
    extern vector<string> container;
    vector<string> object(&container[5], &container[11]);
        )
    Note here that the last element pointed to by the second iterator
(tt(&container[11])) is em(not) stored in tt(object).  This is a simple
example of the use of emi(iterators), in which the i(range of values) that is
used starts at the first value, and includes all elements up to but not
including the element to which the second iterator refers. The standard
notation for this is rangeti(begin, end).
        it() A vector may be initialized using a i(copy constructor):
        verb(
    extern vector<string> container;
    vector<string> object(container);
        )
    )
    it() In addition to the standard operators for containers, the tt(vector)
supports the i(index operator), which may be used to retrieve or reassign
individual elements of the vector. Note that the elements which are indexed
must exist. For example, having defined an empty vector a statement like
tt(ivect[0] = 18) produces an error, as the vector is empty.  So, the vector
is em(not) automatically hi(automatic expansion) expanded, and it em(does)
respect its i(array bounds). In this case the vector should be resized first,
or tt(ivect.push_back(18)) should be used (see below).
    it() The tt(vector) class has the following hi(vector: member functions)
member functions:
        itemization(
        itht(vector::back())(Type &vector::back()):
            quote(this member returns a reference to the last element in the
vector. It is the i(responsibility of the programmer) to use the member only
if the vector is not empty.)
        itht(vector::begin())(vector::iterator vector::begin()):
            quote(this member returns an i(iterator) pointing to the first
element in the vector, returning tt(vector::end()) if the vector is empty.)
        iti(vector::clear()):
            quote(this member erases all the vector's elements.)
        itht(vector::empty())(bool vector::empty())
            quote(this member returns tt(true) if the vector contains no
elements.)
        itht(vector::end())(vector::iterator vector::end()):
            quote(this member returns an iterator pointing beyond the last
element in the vector.)
        itht(vector::erase())(vector::iterator vector::erase()):
            quote(this member can be used to erase a specific range of
elements in the vector:)
            itemization(
            itt(erase(pos)) erases the element pointed to by the iterator
tt(pos). The value tt(++pos) is returned.
            itt(erase(first, beyond)) erases elements indicated by the iterator
range rangett(first, beyond), returning tt(beyond).
            )
        itht(vector::front())(Type &vector::front()):
            quote(this member returns a reference to the first element in the
vector. It is the responsibility of the programmer to use the member only if
the vector is not empty.)
        itht(vector::insert())(... vector::insert()):
            quote(elements may be inserted starting at a certain position. The
return value depends on the version of tt(insert()) that is called:)
            itemization(
            itt(vector::iterator insert(pos)) inserts a default value of type
tt(Type) at tt(pos), tt(pos) is returned.
            itt(vector::iterator insert(pos, value)) inserts tt(value) at
tt(pos), tt(pos) is returned.
            itt(void insert(pos, first, beyond)) inserts the elements in the
                i(iterator range) rangeti(first, beyond).
            itt(void insert(pos, n, value)) inserts tt(n) elements having value
tt(value) at position tt(pos).
            )
        itht(vector::pop_back())(void vector::pop_back()):
            quote(this member removes the last element from the vector. With
an i(empty vector) nothing happens.)
        itht(vector::push_back())(void vector::push_back(value)):
            quote(this member adds tt(value) to the end of the vector.)
        itht(vector::resize())(void vector::resize()):
            quote(this member can be used to alter the number of elements that
are currently stored in the vector:)
            itemization(
            itt(resize(n, value)) may be used to resize the vector to a size
of tt(n). tt(Value) is optional. If the vector is expanded and tt(value) is
not provided, the additional elements are initialized to the i(default value)
of the used data type, otherwise tt(value) is used to initialize extra
elements.
            )
        itht(vector::rbegin())(vector::reverse_iterator vector::rbegin()):
            quote(hi(reverse_iterator) this member returns an iterator
pointing to the last element in the vector.)
        itht(vector::rend())(vector::reverse_iterator vector::rend()):
            quote(this member returns an iterator pointing before the first
element in the vector.)
        itht(vector::size())(size_t vector::size())
            quote(this member returns the number of elements in the vector.)
        itht(vector::swap())(void vector::swap())
            quote(this member can be used to swap two vectors using identical
data types. E.g.,)
        verb(
    #include <iostream>
    #include <vector>
    using namespace std;

    int main()
    {
        vector<int> v1(7);
        vector<int> v2(10);

        v1.swap(v2);
        cout << v1.size() << " " << v2.size() << endl;
    }
    /*
        Produced output:
    10 7
    */
        )
        )
    )
