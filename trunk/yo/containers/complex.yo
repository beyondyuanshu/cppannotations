The ti(complex) container is a specialized container in that it defines
operations that can be performed on i(complex numbers), given possible
numerical real and imaginary data types.

Before tt(complex) containers can be used the following preprocessor directive
must have been specified: hi(#include <complex>)
        verb(
    #include <complex>
        )
    The tt(complex) container can be used to define complex numbers,
consisting of two parts, representing the real and imaginary parts of a
complex number.

While initializing (or assigning) a complex variable, the i(imaginary part)
may be left out of the initialization or assignment, in which case this part
is tt(0) (zero). By default, both parts are zero.

When complex numbers are defined, the type definition requires the
specification of the datatype of the real and imaginary parts. E.g.,
        verb(
    complex<double>
    complex<int>
    complex<float>
        )
    Note that the real and imaginary parts of complex numbers have the same
datatypes.

    Below it is silently assumed that the used tt(complex) type is
tt(complex<double>). Given this assumption, complex numbers may be initialized
as follows:
    itemization(
    itt(target):   A default initialization: real and imaginary parts are 0.
    itt(target(1)): The i(real part) is 1, imaginary part is 0
    itt(target(0, 3.5)): The real part is 0, imaginary part is 3.5
    itt(target(source)): tt(target) is initialized with the values of
tt(source).
    )
    Anonymous complex values may also be used. In the following example two
i(anonymous complex values) are pushed on a stack of complex numbers, to be
popped again thereafter:
        verbinclude(containers/examples/complexstack.cc)
    Note the required i(extra blank space) between the two closing
    i(pointed arrows) in the i(type specification) of tt(cstack).

    The following member functions and operators are defined for complex
numbers (below, tt(value) may be either a primitve i(scalar type) or a
tt(complex) object):
    itemization(
        it() Apart from the standard container operators, the following
operators are supported from the tt(complex) container.
        itemization(
        ithtq(complex::operator+())(complex complex::operator+(value))( this
member returns the sum of the current tt(complex) container and tt(value).)
        ithtq(complex::operator-())(complex complex::operator-(value))( this
member returns the difference between the current tt(complex) container and
tt(value).)
        ithtq(complex::operator*())(complex complex::operator*(value))( this
member returns the product of the current tt(complex) container and
tt(value).)
        ithtq(complex::operator/())(complex complex::operator/(value))( this
member returns the quotient of the current tt(complex) container and
tt(value).)
        ithtq(complex::operator+=())(complex complex::operator+=(value))( this
member adds tt(value) to the current tt(complex) container, returning the
new value.)
        ithtq(complex::operator-=())(complex complex::operator-=(value))(
this member subtracts tt(value) from the current tt(complex) container,
returning the new value.)
        ithtq(complex::operator*=())(complex complex::operator*=(value))( this
member multiplies the current tt(complex) container by tt(value), returning
the new value)
        ithtq(complex::operator/=())(complex complex::operator/=(value))( this
member divides the current tt(complex) container by tt(value), returning the
new value.)
        )
        ittq(Type complex::real())(this member returns the i(real part) of a
complex number.)
        ittq(Type complex::imag())(this member returns the i(imaginary part)
of a complex number.)
        it() Several i(mathematical functions) are available for the
tt(complex) container, such as ti(abs()), ti(arg()), ti(conj()), ti(cos()),
ti(cosh()), ti(exp()), ti(log()), ti(norm()), ti(polar()), ti(pow()),
ti(sin()), ti(sinh()) and ti(sqrt()). These functions are normal functions,
not member functions, accepting complex numbers as their arguments. For
example,
        verb(
    abs(complex<double>(3, -5));
    pow(target, complex<int>(2, 3));
        )
        it() Complex numbers may be hi(operator>>()) extracted from
tt(istream) objects and inserted hi(operator<<()) into tt(ostream) objects. The
insertion results in an i(ordered pair) tt((x, y)), in which tt(x) represents
the real part and tt(y) the imaginary part of the complex number. The same
form may also be used when extracting a complex number from an tt(istream)
object. However, simpler forms are also allowed. E.g., tt(1.2345): only the
real part, the imaginary part will be set to 0; tt((1.2345)): the same value.
    )
