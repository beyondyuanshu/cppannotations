bf(C++) offers a large number of facilities to implement solutions for common
problems. Most of these facilities are part of the em(Standard Template
Library) or they are implemented as em(generic algorithms) (see chapter
ref(STL)).

Among the facilities bf(C++) programmers have developed over and over again
are those for manipulating chunks of text,
commonly called em(strings). The bf(C) programming language offers
rudimentary string support: the emi(ASCII-Z)
terminated series of characters is the foundation on which a large amount of
code has been built+footnote(We define an
    i(ASCII-Z string) as a series of ASCII-characters terminated by the
ASCII-character zero (hence -Z), which has the value zero, and should not be
confused with character ti('0'), which usually has the value ti(0x30)).

Standard bf(C++) now offers a ti(string) type. In order to use
tt(string)-type objects, the header file tt(string) must be included in
sources.

Actually, tt(string) objects are em(class type) variables, and the tt(class)
is formally introduced in chapter ref(Classes). However, in order to use a
string, it is not necessary to know what a class is. In this section the
operators that are available for strings and several other operations are
discussed. The operations that can be performed on strings take the form
    centt(stringVariable.operation(argumentList))
For example, if tt(string1) and tt(string2) are variables of type tt(string),
then
    centt(string1.compare(string2)) can be used to compare both strings. A
function like tt(compare()), which is part of the tt(string)-class is called a
emi(member function). The tt(string) class offers a large number of these
member functions, as well as extensions of some well-known operators, like the
assignment (tt(=)) and the comparison operator (tt(==)). These operators and
functions are discussed in the following sections.
