In this section the available operations on strings are summarized. There are
four subparts here: the tt(string)-initializers, the tt(string)-iterators, the
tt(string)-operators and the tt(string)-member functions.

The member functions are ordered alphabetically by the name of the
operation. Below, tt(object) is a tt(string)-object, and tt(argument) is
either a tt(string const &) or a tt(char const *), unless overloaded versions
tailored to tt(string) and tt(char const *) parameters are explicitly
mentioned. tt(Object) is used in cases where a tt(string) object is
initialized or given a new value. The entity referred to by tt(argument)
always remains unchanged.

Furthermore, tt(opos) indicates an offset into the tt(object) string, tt(apos)
indicates an offset into the tt(argument) string. Analogously, tt(on)
indicates a number of characters in the tt(object) string, and tt(an)
indicates a number of characters in the tt(argument) string. Both tt(opos) and
tt(apos) must refer to existing offsets, or an exception will be generated. In
contrast to this, tt(an) and tt(on) may exceed the number of available
characters, in which case only the available characters will be considered.

When streams are involved, tt(istr) indicates a stream from which information
is extracted, tt(ostr) indicates a stream into which information is inserted.

With member functions the types of the parameters are given in a
function-prototypical way. With several member functions em(iterators) are
used. At this point in the Annotations it's a bit premature to discuss
iterators, but for referential purposes they have to be mentioned
nevertheless. So, a forward reference is used here: see section ref(ITERATORS)
for a more detailed discussion of em(iterators). Like tt(apos) and tt(opos),
iterators must also refer to an existing character, or to an available
iterator range of the string to which they refer.

Finally, note that all tt(string)-member functions returning indices in
tt(object) return the predefined constant ti(string::npos) if no
suitable index could be found.
