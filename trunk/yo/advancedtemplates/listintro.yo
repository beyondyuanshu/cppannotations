This section serves two purposes. On the one hand it illustrates capabilities
of the various meta-programming capabilities of templates, which can be used
as a source of inspiration when developing your own templates. On the other
hand, it culminates in a concrete example, showing some of the power template
meta-programming has.

This section itself was inspired by Andrei Alexandrescu's (2001) book
        hi(Alexandrescu, A.)
    bf(Modern C++ design). It diverts from Alexandrescu's book in its use of
variadic templates which were not yet available when he wrote his book. Even
so, the algorithms used by Alexandrescu are still useful when using variadic
templates.

    The C++0x standard offers the link(tuple)(TUPLES) to store and retrieve
values of multiple types. Here the focus is merely on processing types.
A simple struct tt(TypeList) will be our working horse for the upcoming
subsections. Here is its definition:
        verbinsert(TYPELIST)(advancedtemplates/examples/typelist.h)
    A typelist allows us to store any number of types. Here is an example
storing the three types tt(char, short, int) in a tt(TypeList):
        verb(
    TypeList<char, short, int>
        )
