The C++11 standard offers many facilities to identify and modifiy
characteristics of types. Before using these facilities the tthi(type_traits)
header file must be included.

All facilities offered by tt(type_traits) are defined in the tt(std)
namespace (omitted from the examples given below), allowing programmers to
determine various characteristics of types and values.

At the description of several of these facilities the concept of a
        emi(trivial member function)
    is used. Trivial member functions are never declared (other than
tt(default)) in their class interfaces and (for default constructors or
assignment operators) only perform byte-by-byte actions. Here are two
examples: tt(struct Pod) only has trivial members as it doesn't explicitly
declare any member function and its data member is em(plain old
data). tt(struct Nonpod) is em(not) plain old data. Although it doesn't
explictly declare any member function either, its data member is a
tt(std::string), which itself isn't plain old data as tt(std::string) has
non-trivial constructors:
        verb(
    struct Pod
    {
        int x;
    };

    struct Nonpod
    {
        std::string s;
    };
        )

    Facilities are provided to:
    itemization(
    it() determine whether a type is an lvalue reference+nl()
            (ti(is_lvalue_reference)tt(<typename Type>::value));
    it() determine whether a type is an rvalue reference+nl()
            (ti(is_rvalue_reference)tt(<typename Type>::value));
    it() determine whether a type is a reference+nl()
            (ti(is_reference)tt(<typename Type>::value));
    it() determine whether a type is a signed type+nl()
            (ti(is_signed)tt(<typename Type>::value));
    it() determine whether a type is an unsigned type+nl()
            (ti(is_unsigned)tt(<typename Type>::value));
    it() determine whether a type is emi(plain old data) (e.g., a struct not
            having non-trivial member functions)+nl()
            (ti(is_pod)tt(<typename Type>::value));
    it() determine whether a type has a i(trivial default constructor)+nl()
            (ti(has_trivial_default_constructor)tt(<typename Type>::value));
    it() determine whether a type has a trivial copy constructor+nl()
            (ti(has_trivial_copy_constructor)tt(<typename Type>::value));
    it() determine whether a type has a trivial destructor+nl()
            (ti(has_trivial_destructor)tt(<typename Type>::value));
    it() determine whether a type has a trivial assignment operator+nl()
            (ti(has_trivial_assign)tt(<typename Type>::value));
    it() determine whether a type has a constructor not throwing
            exceptions+nl()
            (ti(has_nothrow_default_constructor)tt(<typename Type>::value));
    it() determine whether a type has a destructor not throwing
            exceptions+nl()
            (ti(has_nothrow_destructor)tt(<typename Type>::value));
    it() determine whether a type has a copy constructor not throwing
            exceptions+nl()
            (ti(has_nothrow_copy_constructor)tt(<typename Type>::value));
    it() determine whether a type has an assignment operator not
            throwing exceptions+nl()
            (ti(has_nothrow_assign)tt(<typename Type>::value));
    it() determine whether a type tt(Base) is a base class of another type
            tt(Derived)nl()
            (ti(is_base_of)tt(<typename Base, typename Derived>::value));
    it() determine whether a type tt(From) may be converted to a type tt(To)
            (e.g., using a tt(static_cast))nl()
            (ti(is_convertible)tt(<typename From, typename To>::value));
    it() conditionally define tt(Type) if tt(cond) is true+nl()
            (ti(enable_if)tt(<bool cond, typename Type>::type));
    it() conditionally use tt(TrueType) if tt(cond) is true, tt(FalseType) if
            not+nl()
            (ti(conditional)tt(<bool cond, typename TrueType, typename
                                FalseType>::type));
    it() remove a reference from a type+nl()
            (ti(remove_reference)tt(<typename Type>::type));
    it() add an lvalue reference to a type+nl()
            (ti(add_lvalue_reference)tt(<typename Type>::type));
    it() add an rvalue reference to a type+nl()
            (ti(add_rvalue_reference)tt(<typename Type>::type));
    it() construct an unsigned type+nl()
            (ti(make_unsigned)tt(<typename Type>::type));
    it() construct a signed type+nl()
            (ti(make_signed)tt(<typename Type>::type));
    )
