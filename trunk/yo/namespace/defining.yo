Namespaces are defined according to the following syntax:
        verb(
    namespace identifier
    {
        // declared or defined entities
        // (declarative region)
    }
        )
    The identifier used in the definition of a namespace is a standard bf(C++)
identifier.

    Within the emi(declarative region), introduced in the above code
example, functions, variables, structs, classes and even (nested) namespaces
can be defined or declared. Namespaces cannot be defined within a block. So it
is not possible to define a namespace within, e.g., a function. However, it is
possible to define a namespace using multiple em(namespace)
declarations. Namespaces are called `em(open)'. This means that a namespace
tt(CppAnnotations) could be defined in a file tt(file1.cc) and also in a file
tt(file2.cc). The entities defined in the tt(CppAnnotations) namespace of
files tt(file1.cc) and tt(file2.cc) are then united in one tt(CppAnnotations)
namespace region. For example:
        verb(
    // in file1.cc
    namespace CppAnnotations
    {
        double cos(double argInDegrees)
        {
            ...
        }
    }

    // in file2.cc
    namespace CppAnnotations
    {
        double sin(double argInDegrees)
        {
            ...
        }
    }
        )
    Both tt(sin()) and tt(cos()) are now defined in the same
tt(CppAnnotations) namespace.

    Namespace entities can be defined outside of their namespaces. This
topic is discussed in section ref(OUTSIDE).
