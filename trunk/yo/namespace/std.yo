Many entities of the runtime available software (e.g., tt(cout, cin, cerr) and
the templates defined in the em(Standard Template Library), see chapter
ref(STL)) are now defined in the tt(std) namespace.

Regarding the discussion in the previous section, one should use a tt(using)
declaration for these entities. For example, in order to use the tt(cout)
stream, the code should start with something like
        verb(
    #include <iostream>
    using std::cout;
        )
    Often, however, the identifiers that are defined in the tt(std) namespace
can all be accepted without much thought. Because of that, one frequently
encounters a tt(using) directive, rather than a tt(using) declaration with the
tt(std) namespace. So, instead of the mentioned tt(using declaration) a
construction like
        verb(
    #include <iostream>
    using namespace std;
        )
    is encountered. Whether this should be encouraged is subject of some
dispute. Long tt(using) declarations are of course inconvenient too. So, as a
i(rule of thumb) one might decide to stick to tt(using) declarations, up to
the point where the list becomes impractically long, at which point a
tt(using) directive could be considered.
