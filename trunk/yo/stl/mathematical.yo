The following standard distributions are currently available (an example
showing their use is provided at the end of this section). For information
about the distributions mentioned below can be found at web-locations like
lurl(http://en.wikipedia.org/wiki/Bernoulli_distribution).

    Before using the mathematical distributions the tthi(random) header file
must have been included.

    All distributions offer the following members (em(result_type) refers to
the type name of the values returned by the distribution;
em(name_distribution) refers to the type name of the mathematical
distribution, e.g., tt(bernoulli_distribution)):
    itemization(
    itt(result_type operator()(RandomNumberGenerator):)
        The next randomly generated value is returned.
    itt(std::istream &operator<<(std::istream &in,
            distribution-name &object):)
        The parameters of the distribution are extracted from an
        tt(std::istream);
    itt(std::ostream &operator<<(std::ostream &out,
            bernoulli_distribution const &bd):)
        The parameters of the distribution are inserted into an
        tt(std::ostream)
    )

Distributions:
    itemization(
    it() ti(bernoulli_distribution)nl()
        Logical tt(true) values are generated with a certain probability
        tt(p).nl()
        Constructor:
        itemization(
        itt(bernoulli_distribution(double p = 0.5))nl()
        )

    it() ti(binomial_distribution<IntType = int, RealType = double>)nl()
       tt(IntType): the type of the generated random value (by default
        tt(int)). nl()
        tt(RealType): the probability parameter of the binomial
        distribution.nl()
        Random integral values are generated according to the
        specified binomial distribution+nl()
        Constructor:
        itemization(
        itt(binomial_distribution<IntType, RealType>OPENPARIntType t,
            RealType p =)linebreak()tt(RealType(0.5)CLOSEPAR)
        )

    it() ti(gamma_distribution<Type = double>)nl()
        tt(Type): the parameter of the gamma distribution.nl()
        Random values are generated according to the
        specified gamma distribution.nl()
        Constructor:
        itemization(
        itt(gamma_distribution<IntType, Type>(Type alpha = Type(1)))nl()
        )

    it() ti(geometric_distribution<IntType = int, RealType = double>)nl()
        tt(IntType): the type of the generated random value (by default
        tt(int)). nl()
        tt(RealType): the probability parameter of the geometric
        distribution.nl()
        Random integral values are generated according to the
        specified geometric distribution+nl()
        Constructor:
        itemization(
        itt(geometric_distribution<IntType, RealType>(RealType p =
        RealType(0.5)))nl()
        )

    it() ti(exponential_distribution<Type = double>)nl()
        tt(Type): the parameter of the exponential distribution.nl()
        Random integral values are generated according to the
        specified exponential distribution+nl()
        Constructor:
        itemization(
        itt(exponential_distribution<IntType, Type>(Type lambda =
        Type(1)))nl()
        )

    it() ti(normal_distribution<Type = double>)nl()
        tt(Type): the type of the generated random value (by default
        tt(double)). nl()
        Constructor:
        itemization(
        itt(normal_distribution<Type>(ReadType mean = Type(0),
            Type sigma = Type(1)))nl()
        )

    it() ti(poisson_distribution<IntType = int, RealType = double>)nl()
        tt(IntType): the type of the generated random value (by default
        tt(int)). nl()
        tt(RealType): the type of the parameter of the distribution (by default
        tt(double)). nl()
        Random integral values are generated that are distributed
        according to a poisson distribution with parameter tt(mean).
        Constructor:
        itemization(
        itt(poisson_distribution<IntType, RealType>(RealType mean =
        RealType(1)))nl()
        )

    it() ti(uniform_int<Type = int>)nl()
        tt(Type): the type of the generated random value (by default
        tt(int)). nl()
        Random integral values are generated that are uniformly
        distributed over a certain range.nl()
        Constructor:
        itemization(
        itt(uniform_int<Type>(Type min = 0, Type max = 9))nl()
        )
        Additional member:
        itemization(
        itt(Type operator()(RandomNumberGenerator), Type upper)nl()
            Random numbers are generated in the range rangett(0)(upper)
            (half-inclusive).
        )

    it() ti(uniform_real<Type = real>)nl()
        tt(Type): the type of the generated random value (by default
        tt(real)). nl()
        Random real values are generated that are uniformly
        distributed over a certain range.nl()
        Constructor:
        itemization(
        itt(uniform_real<Type>(Type min = Type(0), Type max = Type(1)))nl()
        )
        Note: the current implementation generates
            verb(
        GRN * (max - min) + min
            )
        which might not be what you'd expect.
    )

    Some of the distributions mentioned below appear not yet to be fully
operational in the STL. This appears to be the case for the
tt(binomial_distribution), the tt(gamma_distribution), the linebreak()
tt(normal_distribution), and the tt(poisson_distribution). These distributions
will likely become fully operational in the near future.

    Here is an example showing the outcome of a statistical experiment
consisting of throwing an honest coin 20 times:
    verbinclude(stl/examples/coins.cc)

