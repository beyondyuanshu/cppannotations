The following sections describe the i(generic algorithms) in alphabetical
order. For each algorithm the following information is provided:
    itemization(
    it() The required header file;
    it() The function prototype;
    it() A short description;
    it() A short example.
    )
    In the i(prototypes) of the algorithms tt(Type) is used to specify a
i(generic data type). Also, the particular type of iterator (see section
ref(ITERATORS)) that is required is mentioned, as well as other generic types
that might be required (e.g., performing tt(BinaryOperations), like
tt(plus<Type>())).

Almost every generic algorithm expects an iterator range rangeti(first, last),
defining the range of elements on which the algorithm operates. The iterators
point to objects or values. When an iterator points to a tt(Type) value or
object, function objects used by the algorithms usually receive tt(Type const
&) objects or values: function objects can therefore not modify the objects
they receive as their arguments. This does not hold true for
    emi(modifying generic algorithms), which em(are) (of course) able to
modify the objects they operate upon.

Generic algorithms may be categorized. In the bf(C++) Annotations the
following i(categories of generic algorithms) are distinguished:
    itemization(
    it() Comparators: comparing (ranges of) elements:
        quote(
            Requires: ti(#include <algorithm>)

            link(equal())(EQUAL);
            link(includes())(INCLUDES);
            link(lexicographical_compare())(LEXCOMP);
            link(max())(MAX);
            link(min())(MIN);
            link(mismatch())(MISMATCH);
        )
    it() Copiers: performing copy operations:
        quote(
            Requires: ti(#include <algorithm>)

            link(copy())(COPY);
            link(copy_backward())(COPYBACK);
            link(partial_sort_copy())(PARTSORTCP);
            link(remove_copy())(REMOVECP);
            link(remove_copy_if())(REMOVECPIF);
            link(replace_copy())(REPLACECP);
            link(replace_copy_if())(REPLACEIF);
            link(reverse_copy())(REVERSECP);
            link(rotate_copy())(ROTATECP);
            link(unique_copy())(UNIQUECP);
        )
    it() Counters: performing count operations:
        quote(
            Requires: ti(#include <algorithm>)

            link(count())(COUNT);
            link(count_if())(COUNTIF);
        )
    it() Heap operators: manipulating a i(max-heap):
        quote(
            Requires: ti(#include <algorithm>)

            link(make_heap())(MAKEHEAP);
            link(pop_heap())(POPHEAP);
            link(push_heap())(PUSHHEAP);
            link(sort_heap())(SORTHEAP);
        )
    it() Initializers: initializing data:
        quote(
            Requires: ti(#include <algorithm>)

            link(fill())(FILL);
            link(fill_n())(FILLN);
            link(generate())(GEN);
            link(generate_n())(GENN);
        )
    it() Operators: performing arithmetic operations of some sort:
        quote(
            Requires: ti(#include <numeric>)

            link(accumulate())(ACCU);
            link(adjacent_difference())(ADJDIFF);
            link(inner_product())(INNERPROD);
            link(partial_sum())(PARTSUM);
        )
    it() Searchers: performing search (and find) operations:
        quote(
            Requires: ti(#include <algorithm>)

            link(adjacent_find())(ADJFIND);
            link(binary_search())(BINSRCH);
            link(equal_range())(EQUALRANGE);
            link(find())(FIND);
            link(find_end())(FINDEND);
            link(find_first_of())(FINDFIRST);
            link(find_if())(FINDIF);
            link(lower_bound())(LOWERBOUND);
            link(max_element())(MAXEL);
            link(min_element())(MINEL);
            link(search())(SEARCH);
            link(search_n())(SEARCHN);
            link(set_difference())(SETDIF);
            link(set_intersection())(SETINT);
            link(set_symmetric_difference())(SETSYM);
            link(set_union())(SETUNI);
            link(upper_bound())(UPPERBOUND);
        )
    it() Shufflers: performing reordering operations (i(sorting),
            i(merging), i(permuting), i(shuffling), i(swapping)):
        quote(
            Requires: ti(#include <algorithm>)

            link(inplace_merge())(INMERGE);
            link(iter_swap())(ITERSWAP);
            link(merge())(MERGE);
            link(next_permutation())(NEXTPERM);
            link(nth_element())(NTHEL);
            link(partial_sort())(PARTSORT);
            link(partial_sort_copy())(PARTSORTCP);
            link(partition())(PARTIT);
            link(prev_permutation())(PREVPERM);
            link(random_shuffle())(SHUFFLE);
            link(remove())(REMOVE);
            link(remove_copy())(REMOVECP);
            link(remove_copy_if())(REMOVECPIF);
            link(remove_if())(REMOVEIF);
            link(reverse())(REVERSE);
            link(reverse_copy())(REVERSECP);
            link(rotate())(ROTATE);
            link(rotate_copy())(ROTATECP);
            link(sort())(SORT);
            link(stable_partition())(STABPART);
            link(stable_sort())(STABSORT);
            link(swap())(SWAP);
            link(unique())(UNIQUE);
        )
    it() Visitors: visiting elements in a range:
        quote(
            Requires: ti(#include <algorithm>)

            link(for_each())(FOREACH);
            link(replace())(REPLACE);
            link(replace_copy())(REPLACECP);
            link(replace_copy_if())(REPLACEIF);
            link(replace_if())(REPLACEIF);
            link(transform())(TRANSFORM);
            link(unique_copy())(UNIQUECP);
        )
    )
