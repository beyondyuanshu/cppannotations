The relational operators hi(relational operations) are called by the
hi(relational function object) relational function objects. All standard
relational operators are supported: tt(==, !=, >, >=, <) and tt(<=). The
following objects are available:
    itemization(
    iti(equal_to<>()): this object's tt(operator()()) member calls
ti(operator==()) as a binary operator, passing it its two parameters and
returning tt(operator==())'s return value.
    iti(not_equal_to<>()): this object's tt(operator()()) member calls
ti(operator!=()) as a binary operator, passing it its two parameters and
returning tt(operator!=())'s return value.
    iti(greater<>()): this object's tt(operator()()) member calls
ti(operator>()) as a binary operator, passing it its two parameters and
returning tt(operator>())'s return value.
    iti(greater_equal<>()): this object's tt(operator()()) member calls
ti(operator>=()) as a binary operator, passing it its two parameters and
returning tt(operator>=())'s return value.
    iti(less<>()): this object's tt(operator()()) member calls
ti(operator<()) as a binary operator, passing it its two parameters and
returning tt(operator<())'s return value.
    iti(less_equal<>()): this object's tt(operator()()) member calls
ti(operator<=()) as a binary operator, passing it its two parameters and
returning tt(operator<=())'s return value.
    )
    Like the arithmetic function objects, these function objects can be used
as em(named) or as emi(anonymous) objects. An example using the relational
function objects using the generic algorithm ti(sort()) is:
        verbinclude(stl/examples/sort.cc)
    The tt(sort()) generic algorithm expects an iterator range and a
i(comparator) of the data type to which the iterators point. The example shows
the
    i(alphabetic sorting) of strings and the i(reversed sorting) of
strings. By passing tt(greater_equal<string>()) the strings are sorted in
em(decreasing) order (the first word will be the 'greatest'), by passing
tt(less<string>()) the strings are sorted in em(increasing) order (the first
word will be the 'smallest').

Note that the type of the elements of tt(argv) is tt(char *), and that the
relational function object expects a tt(string). The relational object
tt(greater_equal<string>()) will therefore use the tt(>=) operator of strings,
but will be called with tt(char *) variables. The promotion from tt(char const
*) to tt(string) is performed silently.
