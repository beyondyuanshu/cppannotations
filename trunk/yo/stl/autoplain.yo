We've already seen the third hi(auto_ptr: empty) form to create an
tt(auto_ptr) object: Without arguments an empty tt(auto_ptr) object is
constructed not pointing to a particular block of memory:
        verb(
    auto_ptr<type> identifier;
        )
    In this case the hi(auto_ptr: 0-pointer) underlying pointer is set to
tt(0) (zero). Since the tt(auto_ptr) object itself is not the pointer, its
value cannot be compared to tt(0) to see if it has not been initialized. E.g.,
code like
        verb(
    auto_ptr<int> ip;

    if (!ip)
        cout << "0-pointer with an auto_ptr object ?" << endl;
        )
    will not produce any output (actually, it won't compile either...). So,
how do we inspect the value of the pointer that's maintained by the
tt(auto_ptr) object? For this the member hi(auto_ptr<>::get()) tt(get()) is
available. This member function, as well as the other member functions of the
class tt(auto_ptr) are described in the next section.
