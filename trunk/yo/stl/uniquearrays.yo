When em(smart pointers) hi(smart pointer) (tt(unique_ptrs) and tt(shared_ptrs)
(cf. section ref(SHAREDPTR))) are used to store arrays the dereferencing
operator makes little sense. On the other hand, when arrays are handled these
objects benefit from index operators.

Smart pointers controlling dynamically allocated arrays may benefit from the
following syntax:
    itemization(
    it() the index (tt[]) notation is used to specify that the the smart
        pointer controls a dynamically allocated array. Example:
            verb(
    unique_ptr<int[]> intArr(new int[3]);
            )
    it() the index operator can be used to access the array's
        elements. Example:
            verb(
    intArr[2] = intArr[0];
            )
    )
    In these cases the smart pointer's destructors call
tt(delete[]) rather than tt(delete).
