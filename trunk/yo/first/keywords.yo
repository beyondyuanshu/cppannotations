bf(C++)'s  i(keywords) are a superset of bf(C)'s  keywords. Here is a
list of all keywords of the language:
        verb(
alignof compl        explicit  new              short       typename
and     concept      extern    not              signed      union
and_eq  const        false     not_eq           sizeof      unsigned
asm     const_cast   float     nullptr          static      using
auto    constexpr    for       operator         static_cast virtual
axiom   continue     friend    or               struct      void
bitand  decltype     goto      or_eq            switch      volatile
bitor   default      if        private          template    wchar_t
bool    delete       import    protected        this        while
break   do           inline    public           throw       xor
case    double       int       register         true        xor_eq
catch   dynamic_cast long      reinterpret_cast try
char    else         mutable   requires         typedef
class   enum         namespace return           typeid
    )
    COMMENT(table generated by src/keywordsort.cc)

    Notes:
    itemization(
    it() The ti(nullptr) keyword is defined in the C++0x standard
(not yet supported by the tt(g++) compiler).
    it()  the emi(operator keywords): tt(and, and_eq, bitand, bitor, compl,
not, not_eq, or, or_eq, xor) and tt(xor_eq) are symbolic alternatives for,
respectively, tt(&&, &=, &, |, ~, !, !=, ||, |=, ^) and tt(^=).
    )

Keywords can only be used for their intended purpose and cannot be used as
names for other entities (e.g., variables, functions, class-names, etc.). In
addition to keywords i(identifiers starting with an underscore) and living in
the emi(global namespace) (i.e., not using any explicit namespace or using the
mere tt(::) namespace specification) or living in the em(std namespace) are
 i(reserved identifiers) in the sense that their use is a prerogative of the
implementor.
