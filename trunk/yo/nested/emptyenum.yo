    tt(Enum) types usually have values. However, this is not required. In
section ref(DYNAMICCAST) the ti(std::bad_cast) type was introduced. A
tt(std::bad_cast) is thrown by the ti(dynamic_cast<>()) operator when a
reference to a i(base class) object cannot be cast to a i(derived class)
reference. The tt(std::bad_cast) could be caught as type, irrespective of any
value it might represent.

    Actually, it is not even necessary for a hi(types: without values) type to
contain values. It is possible to define an emi(empty enum), an tt(enum)
without any values, whose name may thereupon be used as a legitimate type name
in, e.g. a ti(catch) clause defining an i(exception handler).

    An empty tt(enum) is defined as follows (often, but not necessarily within
a ti(class)):
        verb(
    enum EmptyEnum
    {};
        )
    Now an tt(EmptyEnum) may be thrown (and caught) as an exception:
        verbinclude(nested/examples/emptyenum.cc)
