In section ref(VIRTCONS) the notion of virtual constructors was introduced. In
that section a class tt(Base) was used as an abstract base class. A class
tt(Clonable) was thereupon defined to manage tt(Base) class pointers in
containers like vectors.

As the class tt(Base) is a very small class, hardly requiring any
implementation, it can well be defined as a nested class in tt(Clonable). This
will emphasize the close relationship that exists between tt(Clonable) and
tt(Base), as shown by the way classes are derived from tt(Base). One no longer
writes:
        verb(
    class Derived: public Base
        )
but rather:
        verb(
    class Derived: public Clonable::Base
        )
    Other than defining tt(Base) as a nested class, and deriving from
tt(Clonable::Base) rather than from tt(Base), nothing needs to be
modified. Here is the program shown earlier in section ref(VIRTCONS), but now
using nested classes:
        verbinclude(nested/examples/virtcons.cc)
