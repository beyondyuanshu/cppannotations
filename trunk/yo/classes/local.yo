Classes are usually defined at the global or namespace level. However, it is
entirely possible to define hi(classes: local) a class inside a function. Such
classes are called emi(local classes).

Local classes can be very useful in advanced applications involving
inheritance or templates (cf. section ref(NONDEFINIT)). At this point in the
Annotations their use is fairly limited, although their main features can very
well be discussed. Refer to the example shown at the end of this section for
code-examples of the following featurees:
    itemization(
    it() Local classes may use almost all characteristics of normal classes:
they may have have constructors, destructors, data members, member functions;
    it() Local classes cannot define static data members. Static member
functions, however, em(can) be defined.
    it() If a local class needs access to a constant integral value, a
local em(enum) can be used. The tt(enum) may be anonymous, exposing only the
tt(enum) values.
    it() Local classes cannot directly access the non-static variables of their
surrounding context. For example, in the example shown below the class
tt(Local) cannot directly access tt(main)'s tt(argc) parameter.
    it() Local classes may directly access global data and static variables
defined by their surrounding function. This includes variables defined in the
anonymous namespace defined in the source file containing the local class.
    it() Local objects can be defined within the function body, but they
cannot leave the function as objects of their own type. I.e., a local class
name cannot be used for either the return type or for the parameter types of
its surrounding function.
    it() However, as a prelude to emi(inheritance) (chapter ref(INHERITANCE)):
a local class may be derived from an existing class allowing the surrounding
function to return a dynamically allocated locally constructed  class object,
pointer or reference could be returned via a base class pointer or reference.
    it() Since a local class may define static member functions, it is
possible to define emi(nested functions) in bf(C++) somewhat comparable to the
way programming languages like bf(Pascal) allow nested functions to be
defined.
    )
    verbinclude(classes/examples/local.cc)
