Any data member of a class can be declared tt(static); be it in the tt(public)
or tt(private) section of the class definition. Such a data member is created
and initialized only once, in contrast to non-static data members which are
created again and again for each separate object of the class.

hi(static data members) Static data members are created when the program
starts. Note, however, that they are always created as true members of
their classes. It is suggested to prefix static member names with tt(s_) in
order to distinguish them (in class member functions) from the class's data
members (which should preferably start with tt(d_)).

Public static data members hi(public static data members) are like `normal'
i(global variables): they can be accessed by em(all code of the program),
simply using their class names, the scope resolution operator and their
member names.  This is illustrated in the following example:
        verb(
    class Test
    {
        static int s_private_int;

        public:
            static int s_public_int;
    };

    int main()
    {
        Test::s_public_int = 145;   // ok

        Test::s_private_int = 12;   // wrong, don't touch
                                    // the private parts
        return 0;
    }
        )
    This code fragment is not suitable for consumption by a bf(C++) compiler:
it merely illustrates the emi(interface), and not the emi(implementation) of
tt(static) data members, which is discussed next.
