    The ti(const_cast<type>(expression)) operator is used to undo the
tt(const)-ness of a (pointer) type. Assume that a function
    tt(fun(char *s)) is available, which performs some operation on its
tt(char *s) parameter. Furthermore, assume that it's em(known) that the
function does not actually alter the string it receives as its argument. How
can we use the function with a string like tt(char const hello[] = "Hello
world")?

Passing tt(hello) to tt(fun()) produces the warning
    centt(passing `const char *' as argument 1 of `fun(char *)' discards const)
        which can be prevented using the call
                    centt(fun(const_cast<char *>(hello));)
