Traditionally, bf(C) offers the following em(cast) construction:
                         centt((typename)expression) in which tt(typename) is
the name of a valid em(type), and tt(expression) an expression. Apart from the
bf(C) style cast (now deprecated) bf(C++) also supports the em(function call)
notation:
                    centt(typename(expression)) This function call notation is
not actually a cast, but the request to the compiler to construct an
(anonymous) variable of type tt(typename) from the expression
tt(expression). This form is actually very often used in bf(C++), but should
em(not) be used for casting.  Instead, four emi(new-style casts) were
introduced:
    itemization(
    it() The standard cast to convert one type to another is
                     centt(static_cast<type>(expression))
    it() There is a special cast to do away with the tt(const)
type-modification:
                     centt(const_cast<type>(expression))
    it() A third cast is used to change the em(interpretation) of information:
                   centt(reinterpret_cast<type>(expression))
    it() And, finally, there is a cast form which is used in combination with
polymorphism (see chapter ref(POLYMORPHISM)). The
                    centt(dynamic_cast<type>(expression))
    is performed run-time to convert, e.g., a pointer to an object of a
certain class to a pointer to an object further down its so-called em(class
hierarchy). At this point in the em(Annotations) it is a bit premature to
discuss the tt(dynamic_cast), but we will return to this topic in section
ref(DYNAMICCAST).
    )
