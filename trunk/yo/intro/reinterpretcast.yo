    The ti(reinterpret_cast<type>(expression)) operator is used to reinterpret
pointers. For example, using a tt(reinterpret_cast<>()) the individual
bytes making up a tt(double) value can easily be reached. Assume tt(doubleVar)
is a variable of type tt(double), then the individual bytes can be reached
using
        centt(reinterpret_cast<char *>(&doubleVar))
    This particular example also suggests the danger of the cast: it looks as
though a standard tt(C)-string is produced, but there is not normally a
trailing 0-byte. It's just a way to reach the individual bytes of the memory
holding a double value.

More in general: using the cast-operators is a dangerous habit, as it
suppresses the normal type-checking mechanism of the compiler. It is suggested
to i(prevent casts) if at all possible. If circumstances arise in which casts
have to be used, document the reasons for their use well in your code, to make
double sure that the cast will not eventually be the underlying cause for a
program to misbehave.
