So, erasing a type from a typelist can be accomplished. To remove duplicates
all `head' elements must be erased from a typelist's tail. To accomplish this,
the following algorithm is used, defining the tt(EraseDuplicates) template:

    itemization(
    it() First, the general tt(EraseDuplicates) struct is declared. It expects
as its single template type a tt(TypeList):
        verb(
    template <typename TypeList>
    struct EraseDuplicates;
        )
    it() If the typelist is actually a tt(NullType), we're done. The result
will remain to be a tt(NullType):
        verb(
    template <>
    struct EraseDuplicates<NullType>
    {
        typedef NullType  Result;
    };
        )
    it() Next, an tt(EraseDuplicates) specialization is defined for a true
tt(Typelist):
        verb(
    template <typename Head, typename Tail>
    struct EraseDuplicates<TypeList<Head, Tail> >
    ...
        )
    This specialization implements the following reasoning:
        itemization(
        it() If tt(EraseDuplicates) erases duplicates, then no duplicates will
be encountered in the typelist's tail if tt(EraseDuplicates) is recursively
processes the template's tail. When this recursive call is completed, a
typelist is obtained (called, e.g., tt(UniqueTail)) not containing any
type duplicates in the typelist's tail:
        verb(
        typedef typename EraseDuplicates<Tail>::Result UniqueTail;
        )
        it() Of course, the above operation only processed the original
typelist's tail. It may still contain duplicate's of the original template's
head type. Since that latter type is already there (em(viz.) at the original
typelist's head) it can simply be removed from tt(UniqueTail), producing the
typelist tt(NewTail):
        verb(
        typedef typename Erase<UniqueTail, Head>::Result  NewTail;
        )
        it() Finally, the resulting typelist is the original typelist's head
and tt(NewTail):
        verb(
        typedef TypeList<Head, NewTail>  Result;
        )
        )
    )
    Here's the full definition of tt(EraseDuplicates), not exposing
tt(UniequeTail) and tt(NewTail) for cosmetic reasons:
        verbinsert(ERASEDUP)(templateapp/examples/erase.h)
