As we have seen, a member function of a given class is always called in the
context of some object of the class. There is always an implicit `i(substrate)'
for the function to act on. bf(C++) defines a keyword, ti(this), to address
this substrate+footnote(Note that `tt(this)' is not available in the not yet
discussed tt(static) member functions.).

The tt(this) keyword is a pointer variable, which always contains the address
hi(object address) hi(address of objects)
of the object in question. The tt(this) pointer is implicitly declared in each
member function (whether tt(public, protected), or tt(private)). Therefore, it
is as if each member function of the class tt(Person) contains the
following declaration:
        verb(
    extern Person *const this;
        )
    A member function like tt(name()), which returns the tt(name) field of
a tt(Person), could therefore be implemented in two ways: with or without the
tt(this) pointer:
        verb(
    char const *Person::name()   // implicit usage of `this'
    {
        return d_name;
    }

    char const *Person::name()   // explicit usage of `this'
    {
        return this->d_name;
    }
        )
    The tt(this) pointer is not frequently used explicitly.
However, situations do exist where the tt(this) pointer is actually required
(cf. chapter ref(PointMembers)).
