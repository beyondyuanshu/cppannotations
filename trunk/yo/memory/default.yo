As we've seen, classes by default offer a copy constructor and assignment
operator. These class members are implemented so as to provide basic support:
data members of primitive data types are copied byte-by-byte, but for class
type data members their corresponding coy constructors c.q. assignment
operators are called.

The compiler can provide default implementations for move constructors and
move assignment operators.

However, except for the copy constructor, default implementations for
constructors (c.q. assignment operators) are no longer provided once a class
declares at least one constructor (c.q. assignment operator), while the
default copy constructor is suppressed by declarations of either the move
constructor or the move assignment operator.

If default implementations should be available in these cases, it's easy to
add them to the class by adding tt(= default) to the appropriate constructor
and assignment operator declarations.

Here is an example of a class offering all defaults: constructor, copy
constructor, move constructor, assignment operator and move assignment
operator:
        verb(
    class Defaults
    {
        int d_x;
        Mov d_mov;
    };
        )
    Assuming that tt(Mov) is a class offering move operations in addition
to the standard deep copy operations, then the following actions are performed
on the destination's tt(d_mov) and tt(d_x):
        verb(
    Defaults factory();

    int main()
    {                              Mov operation:    d_x:
                                   ---------------------------
      Defaults one;                Mov(),            undefined
      Defaults two(one);           Mov(Mov const &), one.d_x
      Defaults three(factory());   Mov(Mov &&tmp),   tmp.d_x   
                                   
      one = two;                   Mov::operator=(   two.d_x
                                        Mov const &),
                                                     
      one = factory();             Mov::operator=(   tmp.d_x
                                        Mov &&tmp)
    }
        )

    If, however, tt(Defaults) declares at least one constructor (it could be
the copy constructor) and one assignment operator, then only those members and
the copy constructor remain available. E.g.:

        verb(
    class Defaults
    {
        int d_x;
        Mov d_mov;

        public:
            Defaults(int x);
            Defaults operator=(Defaults &&tmp);
    };

    Defaults factory();

    int main()
    {                              Mov operation:    resulting d_x:
                                   --------------------------------
      Defaults one;                ERROR: not available
      Defaults two(one);           Mov(Mov const &), one.d_x
      Defaults three(factory());   ERROR: not available
                                   
      one = two;                   ERROR: not available
      one = factory();             Mov::operator=(   tmp.d_x
                                        Mov &&tmp)
    }
        )
    To reestablish the defaults, append tt(= default) to the appropriate
declarations:
        verb(
    class Defaults
    {
        int d_x;
        Mov d_mov;

        public:
            Defaults()               = default;
            Defaults(Defaults &&tmp) = default;
            Defaults(int x);
            // Default(Default const &) remains available 

            Defaults operator=(Defaults const &rhs) = default;
            Defaults operator=(Defaults &&tmp);
    };
        ) 
 Be cautious, declaring defaults, as default implementations copy data members
of primitive types byte-by-byte from the source object to the destination
object. This is likely to cause problems with pointer type data members.

    The ti(= default) hi(default: =) suffix can only be used when declaring
constructors or assignment operators in the class's public section.
