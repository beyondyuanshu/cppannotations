To achieve operator overloading in the context of a class, the class is simply
expanded with a (usually em(public)) member function naming the particular
operator. That member function is thereupon defined.

For example, to overload the assignment operator tt(=), a function
tt(operator=()) must be defined. Note that the function name consists of two
parts: the keyword ti(operator), followed by the operator itself.  When we
augment a class interface with a member function tt(operator=()), then that
operator is em(redefined) for the class, which prevents the default operator
from being used. Previously (in section ref(OVERLOADASSIGN)) the function
tt(assign()) was offered to solve the memory-problems resulting from using the
default assignment operator. However, instead of using an ordinary member
function it is much more common in bf(C++) to define a dedicated em(operator)
for these special cases. So, the earlier tt(assign()) member may be redefined
as follows (note that the member tt(operator=()) presented below is a first,
rather unsophisticated, version of the overloaded assignment operator.  It
will be improved shortly):
        verb(
    class Person
    {
        public:                             // extension of the class Person
                                            // earlier members are assumed.
            void operator=(Person const &other);
    };
        )
    and its implementation could be
        verb(
    void Person::operator=(Person const &other)
    {
        delete d_name;                      // delete old data
        delete d_address;
        delete d_phone;

        d_name = strdupnew(other.d_name);   // duplicate other's data
        d_address = strdupnew(other.d_address);
        d_phone = strdupnew(other.d_phone);
    }
        )
    The actions of this member function are similar to those of the previously
proposed function tt(assign()), but now its em(name) ensures that this
function is also activated when the assignment operator tt(=) is used. There
are actually two ways to i(call overloaded operators):
        verb(
    Person pers("Frank", "Oostumerweg", "403 2223");
    Person copy;

    copy = pers;                // first possibility
    copy.operator=(pers);       // second possibility
        )
    Actually, the second possibility, explicitly calling tt(operator=()), is
not used very often. However, the code fragment em(does) illustrate two
ways to call the same overloaded operator member function.
