The class ti(streambuf) defines the input and output character sequences that
are processed by streams. Like an ti(ios) object, a tt(streambuf) object is
not directly constructed, but is implied by objects of other classes that are
em(specializations) of the tt(class streambuf).

    The class plays an important role in realizing possibilities that were
available as extensions to the pre-i(ANSI/ISO) standard implementations of
bf(C++). Although the class cannot be used directly, its members are
introduced here, as the current chapter is the most logical place to introduce
the tt(class streambuf). However, this section of the current chapter assumes
a basic familiarity with the concept of polymorphism, a topic discussed in
detail in chapter ref(POLYMORPHISM). Readers not yet familiar with the concept
of polymorphism may, for the time being, skip this section without loss of
continuity.

    The primary reason for existence of the tt(class streambuf), however, is
to decouple the tt(stream) classes from the hi(device) devices they operate
upon. The rationale here is to use an extra software layer between on the one
hand the classes allowing us to communicate with the device and the
communication between the software and the devices themselves. This implements
a emi(chain of command) which is seen regularly in i(software design): The
em(chain of command) is considered a generic pattern for the construction of
i(reusable software), encountered also in, e.g., the i(TCP/IP stack). A
tt(streambuf) can be considered yet another example of the chain of command
pattern: here the program talks to tt(stream) objects, which in turn forward
their requests to tt(streambuf) objects, which in turn communicate with the
devices. Thus, as we will see shortly, we are now able to do in user-software
what had to be done via (expensive) system calls before.

    The tt(class streambuf) has no public constructor, but does make available
several public member functions. In addition to these public member functions,
several member functions are available to specializing classes only. These
emi(protected) em(members) are listed in this section for further
reference. In section ref(FILEBUF) below, a particular specialization of the
tt(class streambuf) is introduced. Note that all public members of
tt(streambuf) discussed here are em(also) available in tt(filebuf).

    In section ref(POLYSTREAMBUF) the process of constructing specializations
of the tt(class streambuf) is discussed, and in chapter ref(CONCRETE) several
other implications of using tt(streambuf) objects are mentioned. In the
current chapter examples of copying streams, of redirecting streams and and of
reading and writing to streams using the tt(streambuf) members of tt(stream)
objects are presented (section ref(ADVANCEDIO)).

    With the tt(class streambuf) the following public member functions are
available. The type ti(streamsize) that is used below may, for all practical
purposes, be considered an tt(unsigned int).

    Public members for i(input) operations:
    itemization(
    ithtq(streambuf::in_avail())
        (streamsize streambuf::in_avail())
        (This member function returns a lower bound on the number of
        characters that can be read immediately.)
    ithtq(streambuf::sbumpc())
        (int streambuf::sbumpc())
        (This member function returns the next available character or
        endOfFile(). The character is removed from the tt(streambuf)
        object. If no input is available, tt(sbumpc()) will call the
        (protected) member hi(streambuf::uflow())
        tt(uflow()) (see section ref(SBPROTECTED) below)
        to make new characters available. endOfFile() is returned if no more
        characters are available.)
    ithtq(streambuf::sgetc())
        (int streambuf::sgetc())
        (This member function returns the next available character or
        endOfFile(). The character is em(not) removed from the tt(streambuf)
        object, however.)
    ithtq(streambuf::sgetn())
        (int streambuf::sgetn(char *buffer, streamsize n))
        (This member function reads tt(n) characters from the input buffer,
        and stores them in tt(buffer). The actual number of characters read is
        returned. This member function calls hi(streambuf::xsgetn()) the
        (protected) member tt(xsgetn()) (see section ref(SBPROTECTED) below)
        to obtain the requested number of characters.)
    ithtq(streambuf::snextc())
        (int streambuf::snextc())
        (This member function removes the current character from the input
        buffer and returns the next available character or
        endOfFile(). The character is em(not) removed from the tt(streambuf)
        object, however.)
    ithtq(streambuf::sputback())
        (int streambuf::sputback(char c))
        (Inserts tt(c) as the next character to read from the tt(streambuf)
        object. Caution should be exercised when using this function: often
        there is a maximum of just one character that can be put back.)
    ithtq(streambuf::sungetc())
        (int streambuf::sungetc())
        (Returns the last character read to the input buffer, to be read again
        at the next input operation.  Caution should be exercised when using
        this function: often there is a maximum of just one character that
        can be put back.)
    )

    Public members for i(output) operations:
    itemization(
    ithtq(streambuf::pubsync())
        (int streambuf::pubsync())
        (Synchronize (i.e., flush) the buffer, by writing any pending
        information available in the tt(streambuf)'s buffer to the
        device. Normally used only by specializing classes.)
    ithtq(streambuf::sputc())
        (int streambuf::sputc(char c))
        (This member function inserts tt(c) into the tt(streambuf) object.
        If, after writing the character, the buffer is full, the function
        calls the (protected) member function hi(streambuf::overflow())
        tt(overflow()) to flush the buffer to the device  (see section
        ref(SBPROTECTED) below).)
    ithtq(streambuf::sputn())
        (int streambuf::sputn(char const *buffer, streamsize n))
        (This member function inserts tt(n) characters from tt(buffer) into
        the tt(streambuf) object. The actual number of inserted characters
        is returned. This member function calls hi(streambuf::xsputn()) the
        (protected) member tt(xsputn()) (see section ref(SBPROTECTED) below)
        to insert the requested number of characters.)
    )

    Public members for miscellaneous operations:
    itemization(
    ithtq(streambuf::pubseekoff())
        (pos_type streambuf::pubseekoff(off_type offset, ios::seekdir way,
            ios::openmode mode = ios::in | ios::out))
        (Reset the offset of the next character to be read or written to
        tt(offset), relative to the standard ti(ios::seekdir) values
        indicating the direction of the seeking operation. Normally used only
        by specializing classes.)
    ithtq(streambuf::pubseekpos())
        (pos_type streambuf::pubseekpos(pos_type offset,
            ios::openmode mode = ios::in | ios::out))
        (Reset the i(absolute position) of the next character to be read or
        written to tt(pos). Normally used only by specializing classes.)
    ithtq(streambuf::pubsetbuf())
        (streambuf *streambuf::pubsetbuf(char* buffer, streamsize n))
        (Define ti(buffer) as the buffer to be used by the tt(streambuf)
        object. Normally used only by specializing classes.)
    )
