The class ti(ostream) is the class defining basic output facilities. The
ti(cout), ti(clog) and ti(cerr) objects are all tt(ostream) objects. Note that
all facilities defined in the tt(ios) class, as far as output is concerned, is
available in the tt(ostream) class as well, due to the inheritance mechanism
(discussed in chapter ref(INHERITANCE)).

We can construct tt(ostream) objects using the following
    emi(ostream constructor):
    itemization(
        itt(ostream object(streambuf *sb)):
            quote(this constructor can be used to construct a wrapper around
an existing tt(streambuf), which may be the interface to an existing file. See
chapter ref(CONCRETE) for examples.) What this boils down to is that it isn't
possible to construct a plain tt(ostream) object that can be used for
insertions. When tt(cout) or its friends is used, we are actually using a
predefined tt(ostream) object that has already been created for us, and
interfaces to, e.g., the standard output stream using a (also predefined)
tt(streambuf) object handling the actual interfacing.

    Note that it em(is) possible to construct an tt(ostream) object passing it
a ih(std::ostream: constructed using a 0-pointer) 0-pointer as a
tt(streambuf). Such an object cannot be used for insertions (i.e., it will
raise its tt(ios::bad) flag when something is inserted into it), but since it
may be given a tt(streambuf) later, it may be preliminary constructed,
receiving its tt(streambuf) once it becomes available.
    )
    In order to use the tt(ostream) class in bf(C++) sources, the
    ti(#include <ostream>) i(preprocessor directive) must be given. To use the
predefined tt(ostream) objects, the ti(#include <iostream>) preprocessor
directive must be given.
