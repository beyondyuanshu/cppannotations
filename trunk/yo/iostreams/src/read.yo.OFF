In order to be able to read from a file an tt(ifstream) object must be
created, in order to be able to read from a string stream an tt(istrstream)
object must be created.

To open a file to read from, the tt(ifstream) constructor receives
the name of the file to be opened:

    center(tt(ifstream in("infile");))

By default this will result in the opening of the file for reading. The file
must exist for the tt(ifstream) object construction to succeed.
Instead of the shorthand form to open a file for reading, and explicit tt(ios)
flag may be used as well:

    center(tt(ifstream in("infile", ios::in);))

As with the tt(ofstream) objects, tt(ifstream) objects may be constructed
first, and opened later:
        verb(
    ifstream
        ifstr;

    ifstr.open("infile");
        )
    Normally, information will be extracted from the tt(ifstream) object using
the extraction operator rshift(), in the way it is used with the standard stream
tt(cin), e.g.:

    center(tt(in >> x >> y;))

By default, the extraction operator skips blanks: between words, between
characters, between numbers, etc.. Consequently, if the input consists of the
following information: verb(
    12
    13
    a b
    hello world
)
then the next code fragment will read tt(12) and tt(13) into tt(x) and tt(y),
will then return the characters tt(a) and tt(b), and will finally read
tt(hello) and tt(world) into the character array tt(buffer):
verb(
    int
        x,
        y;
    char
        c,
        buffer[10];

    in >> x >> y >> c >> c >> buffer >> buffer;
)
Notice that no format specifiers are necessary. The type of the variables
receiving the extracted information determines the nature of the extraction:
integer values for tt(int)s, white space delimited strings for tt(char [])s,
etc..

Just like the tt(fopen()) function of bf(C) may fail, the construction of the
tt(ifstream) object might not succeed. When an attempt is made to
create an tt(ifstream) object, it is a good idea to test the successful
construction. The tt(ifstream) object returns 0 if its construction failed.
This value can be used in tests, and the code can throw an exception (see
section ref(EXCEPTIONS)) or it can handle the failure itself, as in the
following code:

verb(
    #include <iostream>
    #include <fstream>

    int main()
    {
        ifstream
            in("");         // creating 'in' fails

        if (!in)
        {
            cerr << "creating ifstream object failed\n";
            exit(1);
        }
    }
)

Analogous to an tt(ifstream) object, an tt(istrstream) object can be
created. Here no filename is required. E.g.,
        centt(istrstream text("hello world");)
    opens an tt(istrstream) object that is initialized by an ascii-z string.
