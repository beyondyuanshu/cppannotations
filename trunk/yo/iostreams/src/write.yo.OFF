In order to be able to write to a file an tt(ofstream) object must be created,
in order to be able to write to a string stream an tt(ostrstream) object must
be created.

To open a file to write to, the tt(ofstream) constructor receives
the name of the file to be opened:

    centt(ofstream out("outfile");)

By default this will result in the creation of the file, and information
inserted into it will be written from the beginning of the file. Actually,
this corresponds to the creation of the tt(ofstream) object in standard output
mode, for which the enumeration value tt(ios::out) could have been provided as
well:

    center(tt(ofstream out("outfile", ios::out);))

Alternatively, instead of (re)writing the file, the tt(ofstream) object could
be created in the append mode, using the tt(ios::app) mode indicator:

    center(tt(ofstream out("outfile", ios::app);))

Normally, information will be inserted into the tt(ofstream) object using the
insertion operator lshift(), in the way it is used with the standard streams
like tt(cout), e.g.:

    center(tt(out << "Information inserted into the 'out' stream\n";))

Just like the tt(fopen()) function of bf(C) may fail, the construction of the
tt(ofstream) object might not succeed. When an attempt is made to
create an tt(ofstream) object, it is a good idea to test the successful
construction. The tt(ofstream) object returns 0 if its construction failed.
This value can be used in tests, and the code can throw an exception (see
chapter ref(EXCEPTIONS)) or it can handle the failure itself, as in the
following code:

verb(
    #include <iostream>
    #include <fstream>

    int main()
    {
        ofstream
            out("/");   // creating 'out' fails

        if (!out)
        {
            cerr << "creating ofstream object failed\n";
            exit(1);
        }
    }
)

Alternatively, a tt(ofstream) object may be constructed first, and opened
later:
        verb(
    ofstream
        out;

    out.open("outfile");
        )
    Here, the return value of tt(open()) may be inspected to see whether the
stream has been successfully opened or not.


Analogous to an tt(ofstream) object, an tt(ostrstream) object can be
created. Here no filename is required. E.g.,
        centt(ostrstream text;)
    opens an empty tt(ostrstream) object. There is no tt(open()) member
function for tt(ostrstream) objects.

An tt(ostrstream) object may be initialized by an ascii-z string. E.g.,
        centt(ostrstream text("hello world");)
    These strings expand dynamically when more information is inserted into
them. However, the inserted information is not automatically ascii-z
terminated. In order to append an ascii-z to the information inserted into an
tt(ostrstream) object an tt(ends) can be inserted:
        centt(text << ", and there is more." << ends;)
    The information that is stored in a tt(ostrstream) object can be retrieved
from its tt(str()) member, which returns a tt(char const *), but realize that
this will `freeze' the object, see section ref(STRINGSTREAMS). The number of
characters returned by tt(str()) is obtained from the tt(pcount()) member,
returning an tt(int).
