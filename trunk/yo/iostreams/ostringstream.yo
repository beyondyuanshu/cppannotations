In order to hi(write to memory) write information to memory, using the
tt(stream) facilities, ti(ostringstream) objects can be used. These objects
are derived from tt(ostream) objects. The following constructors and members
are available:
    itemization(
        ithtq(ostringstream constructors)
            (ostringstream ostr(string const &s, ios::openmode mode))
            (When using this constructor, the last or both arguments may be
omitted. There is also a constructor requiring only an ti(openmode)
parameter. If tt(string s) is specified and tt(openmode) is tt(ios::ate), the
tt(ostringstream) object is initialized with the tt(string s) and remaining
insertions are appended to the contents of the tt(ostringstream) object.  If
tt(string s) is provided, it will not be altered, as any information inserted
into the object is stored in dynamically allocated memory which is deleted
when the tt(ostringstream) object goes out of scope.)
        itht(ostringstream::str())(string ostringstream::str() const):
            quote(This member function will return the string that is stored
inside the tt(ostringstream) object.)
        itht(ostringstream::str(string))(ostringstream::str(string)):
            quote(This member function will re-initialize the
tt(ostringstream) object with new initial contents.)
    )
    Before the tt(stringstream) class was available the class ti(ostrstream)
was commonly used for doing output to memory. This latter class suffered from
the fact that, once its contents were retrieved using its tt(str()) member
function, these contents were `frozen', meaning that its dynamically allocated
memory was not released when the object went out of scope.  Although this
situation could be prevented (using the tt(ostrstream) member call
ti(freeze(0))), this implementation could easily lead to hi(memory leak)
em(memory leaks). The tt(stringstream) class does not suffer from these
risks. Therefore, the use of the class tt(ostrstream) is now deprecated in
favor of tt(ostringstream).

    The following example illustrates the use of the tt(ostringstream) class:
several values are inserted into the object. Then, the stored text is stored
in a string, whose length and contents are thereupon printed.  Such
    tt(ostringstream) objects are most often used for doing `type to string'
    i(conversions), like converting tt(int) to tt(string). Formatting commands
can be used with tt(stringstreams) as well, as they are available in
    tt(ostream) objects.
    COMMENT(
        It should also be possible to perform em(seek)
operations with tt(ostringstream) objects, but the current i(Gnu) i(g++)
(version 3.0) implementation apparently does not support them.
    END)
    Here is an
example showing the use of an tt(ostringstream) object:
    verbinclude(iostreams/examples/ostringstream.cc)
