Ostreams hi(ostream coupling) can be em(coupled) to ti(ios) objects using the
ti(tie()) member function. This results in flushing all buffered output of the
tt(ostream) object (by calling tt(flush())) whenever an i(input) or i(output)
operation is performed on the tt(ios) object to which the tt(ostream) object
is tied.  By default ti(cout) is tied to ti(cin) (i.e., tt(cin.tie(cout))):
whenever an operation on tt(cin) is requested, tt(cout) is flushed first. To
break the coupling, the member function tt(ios::tie(0)) can be called.

Another (frequently useful, but non-default) example of coupling streams is to
tie ti(cerr) to ti(cout): this way standard output and error messages written
to the screen will appear in sync with the time at which they were generated:
    verbinclude(iostreams/examples/tiecerrcout.cc)

An alternative way to couple streams is to make streams use a common
tt(streambuf) object. This can be realized using the hi(ios::rdbuf())
tt(ios::rdbuf(streambuf *)) member function. This way two streams can use,
e.g. their own formatting, one stream can be used for input, the other for
output, and redirection using the iostream library rather than operating
system calls can be realized. See the next sections for examples.
