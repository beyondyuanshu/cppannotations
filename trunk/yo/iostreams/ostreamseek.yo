Although not every tt(ostream) object supports i(repositioning), they usually
do. This means that it is possible to rewrite a section of the stream which
was written earlier. Repositioning is frequently used in
    emi(database applications) where it must be possible to access the
information in the database randomly.

The following members are available:
    itemization(
        itht(ostream::tellp())(pos_type ostream::tellp()):
            quote(this function returns the current (absolute) position where
the next write-operation to the stream will take place. For all practical
purposes a ti(pos_type) can be considered to be an tt(unsigned long).)
        itht(ostream::seekp())
        (ostream &ostream::seekp(off_type step, ios::seekdir org)):
            quote(This member function can be used to reposition the
stream. The function expects an ti(off_type) tt(step), the stepsize in bytes
to go from tt(org). For all practical purposes a tt(off_type) can be
considered to be a tt(long).
    The origin of the step, tt(org) is an ti(ios::seekdir) value. Possible
values are:
        itemization(
        iti(ios::beg):
            quote(tt(org) is interpreted as the stepsize relative to the
beginning of the stream. If tt(org) is not specified, tt(ios::beg) is
used. )
        iti(ios::cur):
            quote(tt(org) is interpreted as the stepsize relative to the
current position (as returned by tt(tellp()) of the stream).)
        iti(ios::end):
            quote(tt(org) is interpreted as the stepsize relative to the
current end position of the the stream.)
    )
    It is ok to i(seek beyond end of file)hi(write beyond end of file).
Writing bytes to a location beyond endOfFile() will pad the intermediate bytes
with i(ASCII-Z) values: i(null-bytes). It is em(not) allowed to
    i(seek before begin of file).  Seeking before tt(ios::beg) will cause the
ti(ios::fail) flag to be set.
        )
    )
