In order to use ti(setjmp()) and ti(longjmp()) the basic program from section
ref(BASICEXCEPTION) is slightly modified to contain a variable
    tt(jmp_buf jmpBuf). The function tt(Inner::fun()) now calls tt(longjmp),
simulating a i(disastrous event), to be handled at the end of the function
tt(main()). In tt(main()) we see the standard code defining the target
location of the long jump, using the function tt(setjmp()). A zero return
value indicates the initialization of the tt(jmp_buf) variable, upon which the
tt(Outer::fun()) function is called. This situation represents the `normal
flow'.

To complete the simulation, the return value of the program is zero em(only) if
the program is able to return from the function tt(Outer::fun())
normally. However, as we know, this won't happen: tt(Inner::fun()) calls
tt(longjmp()), returning to the tt(setjmp()) function, which (at this time)
will em(not) return a zero return value. Hence, after calling tt(Inner::fun())
from tt(Outer::fun()) the program proceeds beyond the tt(if)-statement in the
tt(main()) function, and the program terminates with the return value 1.  Now
try to follow these steps by studying the following program source, modified
after the basic program given in section ref(BASICEXCEPTION):
        verbinclude(exceptions/examples/jmp.cc)
    The output produced by this program clearly shows that the destructor
of the class tt(Inner) is not executed. This is a direct result of the
non-local characteristic of the call to tt(longjmp()): processing proceeds
immediately from the tt(longjmp()) call in the member function
tt(Inner::fun()) to the function tt(setjmp()) in tt(main()). There, its return
value is zero, so the program terminates with return value 1. What is
important here is that the call to the destructor tt(Inner::~Inner()), waiting
to be executed at the end of tt(Outer::fun()), is never reached.

As this example shows that the destructors of objects can easily be skipped
when hi(longjmp(): avoid) tt(longjmp()) and hi(setjmp(): avoid) tt(setjmp())
are used, these function should be em(avoided) completely in bf(C++) programs.
