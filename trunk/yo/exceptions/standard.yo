All data types may be thrown as exceptions. However, the standard exceptions
    hi(exception: standard) are derived from the emi(class exception). Class
derivation is covered in chapter ref(INHERITANCE), but the concepts that lie
behind inheritance are not required for the the current section.

    All standard exceptions (and all user-defined classes derived from
the class ti(std::exception)) offer the member
        verb(
    char const *what() const;
        )
    hi(exception::what()) describing in a short textual message the nature of
the exception.

    Four classes derived from tt(std::exception) are offered by the language:
    itemization(
    iti(std::bad_alloc): thrown when ti(operator new) fails;
    iti(std::bad_exception): thrown when a function tries to generate another
        type of exception than declared in its i(function throw list);
    iti(std::bad_cast): thrown in the context of em(polymorphism) (see section
        ref(DYNAMICCAST));
    iti(std::bad_typeid): also thrown in the context of em(polymorphism) (see
        section ref(TYPEID));
    )
