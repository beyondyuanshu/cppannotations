When programming in bf(C), programming problems are commonly approached using
a top-down structured approach: functions and actions of the program are
defined in terms of sub-functions, which again are defined in
sub-sub-functions, etc..  This yields a i(hierarchy of code): tt(main()) at
the top, followed by a level of functions which are called from tt(main()),
etc..

In bf(C++) the i(dependencies between code and data) is also frequently defined
in terms of dependencies among em(classes). This looks like emi(composition)
(see section ref(Composition)), where objects of a class contain objects of
another class as their data. But the relation described here is of a different
kind: a class can be em(defined) in terms of an older, pre-existing,
class. This produces a new class having all the functionality of the older
class, and additionally introducing its own specific functionality.  Instead
of composition, where a given class em(contains) another class, we here refer
to emi(derivation), where a given class em(is) another class.

Another term for derivation is emi(inheritance): the new class inherits the
functionality of an existing class, while the existing class does not appear
as a data member in the definition of the new class. When discussing
inheritance the existing class is called the emi(base class), while the new
class is called the emi(derived class).

Derivation of classes is often used when the methodology of bf(C++)
        i(program development)
    is fully exploited. In this chapter we will first address the syntactical
possibilities offered by bf(C++) for deriving classes from other classes. Then
we will address some of the resulting possibilities.

As we have seen in the introductory chapter (see section ref(OOP)), in the
i(object-oriented) approach to problem solving classes are identified during
the i(problem analysis), after which objects of the defined classes represent
entities of the problem at hand. The classes are placed in a hierarchy, where
the top-level class contains the least functionality.  Each new derivation
(and hence descent in the i(class hierarchy)) adds new functionality compared
to yet existing classes.

In this chapter we shall use a simple vehicle classification system to build a
hierarchy of classes. The first class is tt(Vehicle), which implements as its
functionality the possibility to set or retrieve the weight of a vehicle. The
next level in the object hierarchy are land-, water- and air vehicles.

The initial i(object hierarchy) is illustrated in fig(hierarchy).
    figure(inheritance/hierarchy)
    (Initial object hierarchy of vehicles.)
    (hierarchy)
