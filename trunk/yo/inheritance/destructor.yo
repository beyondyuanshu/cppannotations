Destructors of classes are automatically called when an object is
destroyed. This also holds true for objects of classes derived from other
classes. Assume we have the following situation:
        verb(
    class Base
    {
        public:
            ~Base();
    };

    class Derived: public Base
    {
        public:
            ~Derived();
    };

    int main()
    {
        Derived
            derived;
    }
        )
    At the end of the tt(main()) function, the tt(derived) object ceases to
exists. Hence, its i(destructor) (tt(~Derived())) is called. However, since
tt(derived) is also a tt(Base) object, the tt(~Base()) destructor is called as
well.  It is em(not) neccessary to call the base class destructor explicitly
from the derived class destructor.

Constructors hi(constructor: calling order) hi(destructor: calling order) and
destructors are called in a stack-like fashion: when tt(derived) is
constructed, the appropriate base class constructor is called first, then the
appropriate derived class constructor is called. When the object tt(derived)
is destroyed, its destructor is called first, automatically followed by the
activation of the tt(Base) class destructor. A i(derived class destructor) is
always called before its i(base class destructor) is called.
